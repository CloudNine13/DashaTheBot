import db
import utils.config as configurations

from telegram.ext import CallbackContext
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from server.setactions.set_recipe import set_recipe
from utils.randomizer import random_heart, random_emoji
from utils.clear_config import clear_configurations
from utils.prepare_keyboard import prepare_keyboard
from models.recipe import Recipe
from set_recipe import ask_subcategory, set_new_recipe
from get_recipe import get_category_item, get_all


async def button_controller(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    choice = query.data

    if configurations.set_init is True or configurations.get_category is True:
        await context.bot.send_message(
            update.callback_query.message.chat.id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏: <i><b>{choice[:-1]}</b></i> {random_emoji()}',
            parse_mode=ParseMode.HTML
        )
        if choice[-1] == '1':
            await ask_subcategory(update, choice[:-1])

        elif choice[-1] == '0':
            if configurations.set_init is True:
                configurations.set_init = False  # Set init off
                await set_new_recipe(update, context, recipe_type=choice[:-1])
            elif configurations.get_category is True:
                configurations.get_category = False
                await get_category_item(update, context, recipe_type=choice[:-1])

    elif configurations.set_action is True:
        if configurations.change_photo:
            configurations.db_change = True

        configurations.db_set_transition = True
        configurations.set_action = False
        configurations.change_photo = False
        recipe_object = configurations.recipe_object

        if choice == '–¥–∞':
            recipe_object.index += 1
            keyboard = [[KeyboardButton(text='–≥–æ—Ç–æ–≤–æ')]]
            reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.callback_query.message.reply_text(
                '–ñ–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞, –Ω–∞–∂–º–∏—Ç–µ –≥–æ—Ç–æ–≤–æ, —á—Ç–æ–±—ã '
                '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫. –î–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –∏–ª–∏'
                f'—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º, –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ üòû). –°–ø–∞—Å–∏–±–æ {random_heart()}!',
                reply_markup=reply_markup
            )

        elif choice == '–Ω–µ—Ç':
            recipe_object.index += 1
            recipe_object.photo_path = []
            assert recipe_object.index == recipe_object.max_index
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                f'–ù—É —á—Ç–æ –∂–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞! –°–ø–∞—Å–∏–±–æ {random_heart()}'
            )
            if configurations.db_set_transition:
                await set_recipe(update.callback_query.message.chat.id, context.bot)
            elif configurations.db_change:
                await db.update_item(update.callback_query.message.chat.id, context.bot)

    elif configurations.get_init is True:
        configurations.get_init = False
        await context.bot.send_message(
            update.callback_query.message.chat.id,
            f'–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å <i><b>{choice}</b></i> ',
            parse_mode=ParseMode.HTML
        )

        if choice == '–∏–º—è':
            configurations.get_name = True
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ üìñ',
            )

        elif choice == '–∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            configurations.get_category = True
            reply_markup = prepare_keyboard()
            await update.callback_query.message.reply_text(
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìã',
                reply_markup=reply_markup
            )

        elif choice == '–≤—Å–µ':
            configurations.get_all = True
            await get_all(update, context)

    elif configurations.can_change is True and configurations.transaction_data is not None:
        configurations.can_change = False

        if choice == '—É–¥–∞–ª–∏—Ç—å':
            await db.delete_item(update.callback_query.message.chat.id, context.bot)
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                f'–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª—ë–Ω! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π! {random_heart()}'
            )
            clear_configurations()

        elif choice == '–∏–∑–º–µ–Ω–∏—Ç—å':
            configurations.update_recipe = True
            configurations.recipe_object = Recipe()
            configurations.recipe_object.name = configurations.transaction_data[0]
            configurations.recipe_object.recipe_type = configurations.transaction_data[1]
            configurations.recipe_object.description = configurations.transaction_data[2]
            configurations.recipe_object.photo_path = configurations.transaction_data[3]
            keyboard = [
                [InlineKeyboardButton('–î–∞', callback_data='–î–∞, –∏–º—è'),
                 InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç, –∏–º—è')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.reply_text(
                '–í—ã –±—É–¥–µ—Ç–µ –º–µ–Ω—è—Ç—å –∏–º—è —Ä–µ—Ü–µ–ø—Ç–∞? üìñ',
                reply_markup=reply_markup
            )

    elif configurations.update_recipe is True:
        configurations.update_recipe = False

        if choice == '–î–∞, –∏–º—è':
            configurations.change_name = True
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞'
            )

        if choice == '–ù–µ—Ç, –∏–º—è':
            configurations.update_recipe = True
            keyboard = [
                [InlineKeyboardButton('–î–∞', callback_data='–î–∞, –æ–ø–∏—Å–∞–Ω–∏–µ'),
                 InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.reply_text(
                '–ú–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞? üìã',
                reply_markup=reply_markup
            )

        if choice == '–î–∞, –æ–ø–∏—Å–∞–Ω–∏–µ':
            configurations.change_description = True
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞'
            )

        if choice == '–ù–µ—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ':
            configurations.update_recipe = False
            await context.bot.send_message(
                update.callback_query.message.chat.id,
                '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'
            )
            await db.update_item(update.callback_query.message.chat.id, context.bot)

            # configurations.update_recipe = True
            # keyboard = [
            #     [InlineKeyboardButton('–î–∞', callback_data='–î–∞, —Ñ–æ—Ç–æ'),
            #      InlineKeyboardButton('–ù–µ—Ç', callback_data='–ù–µ—Ç, —Ñ–æ—Ç–æ')]
            # ]
            # reply_markup = InlineKeyboardMarkup(keyboard)
            # update.callback_query.message.reply_text(
            #     '–ú–µ–Ω—è–µ–º —Ñ–æ—Ç–æ? üì∏',
            #     reply_markup=reply_markup
            # )

        # if choice == '–î–∞, —Ñ–æ—Ç–æ':
        #     configurations.db_change = True
        #     recipe_object = configurations.recipe_object
        #     recipe_object.index += 1
        #     context.bot.send_message(
        #         update.callback_query.message.chat.id,
        #         '–ñ–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ç–æ–≤–æ, '
        #         '—á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫. –°–ø–∞—Å–∏–±–æ ' + helper.random_heart()
        #     )
        #
        # if choice == '–ù–µ—Ç, —Ñ–æ—Ç–æ':
        #     configurations.update_recipe = False
        #     context.bot.send_message(
        #         update.callback_query.message.chat.id,
        #         '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'
        #     )
        #     db.update_item(update.callback_query.message.chat.id, context.bot)
